#!/bin/bash

install() {
  # prepare vars
  local name="$PACKAGE_CORE_NAME"

  log::info "[$(timestamp)][package][$name] preparing ..."

  # get system os/arch
  local os="$PACKAGE_OS"
  local arch="$PACKAGE_OS_ARCH"
  local kernel="$PACKAGE_OS_KERNEL"
  local platform="$PACKAGE_OS_PLATFORM"
  # usr_bin_dir
  local usr_bin_dir="$PACKAGE_USER_BIN_DIR"
  local tmp_dir="$PACKAGE_TMP_DIR"

  # files
  local tmp_file="$name.tar.gz"
  local source_bin_file="./$name/$name"
  # reference: https://github.com/9seconds/mtg/releases
  # example:
  #   https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.2/cri-dockerd-0.3.2.darwin.amd64.tgz
  #   https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.2/cri-dockerd-0.3.2.amd64.tgz
  #   https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.2/cri-dockerd-0.3.2.arm64.tgz
  # generate url
  local url=""

  case $platform in
  darwin)
    case $arch in
    amd64)
      url="${PACKAGE_CORE_RELEASE_DOWNLOAD}/$PACKAGE_CORE_VERSION/${name}-${PACKAGE_CORE_VERSION#v}.${platform}.${arch}.tgz"
      ;;
    *)
      log::error "[$(timestamp)] unsupport arch: $arch"
      return 1
      ;;
    esac
    ;;
  linux)
    case $arch in
    arm64)
      url="${PACKAGE_CORE_RELEASE_DOWNLOAD}/$PACKAGE_CORE_VERSION/${name}-${PACKAGE_CORE_VERSION#v}.${arch}.tgz"
      ;;
    amd64)
      url="${PACKAGE_CORE_RELEASE_DOWNLOAD}/$PACKAGE_CORE_VERSION/${name}-${PACKAGE_CORE_VERSION#v}.${arch}.tgz"
      ;;
    *)
      log::error "[$(timestamp)] unsupport arch: $arch"
      return 1
      ;;
    esac
    ;;
  *)
    log::error "[$(timestamp)] unsupport platform: $platform"
    return 1
    ;;
  esac

  log::debug "[$(timestamp)][package][$name][$kernel][$arch] url: $url, file: ${tmp_file}, tmp_dir: $tmp_dir"

  log::info "[$(timestamp)][package][$name] os: $os"
  log::info "[$(timestamp)][package][$name] arch: $arch"
  log::info "[$(timestamp)][package][$name] kernel: $kernel"
  log::info "[$(timestamp)][package][$name] platform: $platform"
  log::info "[$(timestamp)][package][$name] usr_bin_dir: $usr_bin_dir"
  log::info "[$(timestamp)][package][$name] source_bin_file: $source_bin_file"
  log::info "[$(timestamp)][package][$name] url: $url"
  log::info "[$(timestamp)][package][$name] tmp_dir: $tmp_dir"
  log::info "[$(timestamp)][package][$name] tmp_file: $tmp_file"
  if [ -n "$PLUGIN_PACKAGE_INSTALL_MODE" ]; then
    log::info "[$(timestamp)][package][$name] mode: $PLUGIN_PACKAGE_INSTALL_MODE"
  fi

  # prepare context
  cd $tmp_dir

  # download
  log::info "[$(timestamp)][package][$name] downloading ..."
  os::download $tmp_file $url
  if [ "$?" != "0" ]; then
    log::error "[$(timestamp)][package][$name] failed to download from $url ."
    return 1
  fi

  # extract
  log::info "[$(timestamp)][package][$name] extracting ..."
  os::extract $tmp_file

  # install
  log::info "[$(timestamp)][package][$name] installing ..."
  os::install $source_bin_file $usr_bin_dir $name

  if [ "$(os::has_command systemctl)" = "true" ]; then
    local systemd_service_dir="/etc/systemd/system"
    local systemd_service_file=$systemd_service_dir/cri-docker.service
    local systemd_service_socket_file=$systemd_service_dir/cri-docker.socket
    if [ ! -d "$systemd_service_dir" ]; then
      sudo mkdir -p $systemd_service_dir
    fi

    local changed=false
    if [ ! -f "$systemd_service_file" ]; then
      changed=true
      sudo cp $PACKAGE_DIR/conf/etc/systemd/system/cri-docker.service $systemd_service_dir
    fi

    if [ ! -f "$systemd_service_socket_file" ]; then
      changed=true
      sudo cp $PACKAGE_DIR/conf/etc/systemd/system/cri-docker.socket $systemd_service_dir
    fi

    if [ "$changed" = "true" ]; then
      sudo systemctl daemon-reload
      sudo systemctl enable --now cri-docker
    fi
  fi

  if [ "$PLUGIN_PACKAGE_INSTALL_MODE" != "test" ]; then
    # clean
    log::info "[$(timestamp)][package][$name] cleaning ..."
    rm -rf $tmp_dir
  fi
}

export -f install
